{"ast":null,"code":"import axios from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\nexport class Auth {\n  constructor() {}\n  authenticate(utilisateur) {\n    return axios.post(\"http://127.0.0.1:3000/connexion\", utilisateur, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(response => response.data).then(data => {\n      //Je stock le token dans le localeStorage\n      window.localStorage.setItem(\"authToken\", data.access_token);\n      //On previent axios qu'on a maintenant un header sur toutes nos futures requètes http\n      this.setAxiosToken(data.access_token);\n      return data;\n    });\n  }\n  logout() {\n    window.localStorage.removeItem(\"authToken\");\n    delete axios.defaults.headers[\"Authorization\"];\n  }\n  setAxiosToken(token) {\n    axios.defaults.headers[\"Authorization\"] = \"Bearer \" + token;\n  }\n  setup() {\n    const token = window.localStorage.getItem(\"authToken\");\n    if (token) {\n      const {\n        exp: expiration\n      } = jwtDecode(token);\n      if (expiration * 1000 > new Date().getTime()) {\n        this.setAxiosToken(token);\n      } else {\n        this.logout();\n      }\n    } else {\n      this.logout();\n    }\n  }\n  isAuthenticated() {\n    const token = window.localStorage.getItem(\"authToken\");\n    if (token) {\n      const {\n        exp: expiration\n      } = jwtDecode(token);\n      if (expiration * 1000 > new Date().getTime()) {\n        return true;\n      }\n      return false;\n    } else {\n      return false;\n    }\n  }\n  getUser() {\n    const token = window.localStorage.getItem(\"authToken\");\n    if (token) {\n      const {\n        user\n      } = jwtDecode(token);\n      return user;\n    } else {\n      return null;\n    }\n  }\n}\nexport default Auth;","map":{"version":3,"names":["axios","jwtDecode","Auth","constructor","authenticate","utilisateur","post","headers","Accept","then","response","data","window","localStorage","setItem","access_token","setAxiosToken","logout","removeItem","defaults","token","setup","getItem","exp","expiration","Date","getTime","isAuthenticated","getUser","user"],"sources":["C:/wamp64/www/Escape-Game/react-escape/src/Services/Auth.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nexport class Auth {\r\n  constructor() {}\r\n\r\n  authenticate(utilisateur) {\r\n    return axios\r\n      .post(\"http://127.0.0.1:3000/connexion\", utilisateur, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n      .then((response) => response.data)\r\n      .then((data) => {\r\n        //Je stock le token dans le localeStorage\r\n        window.localStorage.setItem(\"authToken\", data.access_token);\r\n        //On previent axios qu'on a maintenant un header sur toutes nos futures requètes http\r\n        this.setAxiosToken(data.access_token);\r\n        return data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    window.localStorage.removeItem(\"authToken\");\r\n    delete axios.defaults.headers[\"Authorization\"];\r\n  }\r\n\r\n  setAxiosToken(token) {\r\n    axios.defaults.headers[\"Authorization\"] = \"Bearer \" + token;\r\n  }\r\n\r\n  setup() {\r\n    const token = window.localStorage.getItem(\"authToken\");\r\n    if (token) {\r\n      const { exp: expiration } = jwtDecode(token);\r\n      if (expiration * 1000 > new Date().getTime()) {\r\n        this.setAxiosToken(token);\r\n      } else {\r\n        this.logout();\r\n      }\r\n    } else {\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  isAuthenticated() {\r\n    const token = window.localStorage.getItem(\"authToken\");\r\n    if (token) {\r\n      const { exp: expiration } = jwtDecode(token);\r\n      if (expiration * 1000 > new Date().getTime()) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getUser() {\r\n    const token = window.localStorage.getItem(\"authToken\");\r\n    if (token) {\r\n      const { user } = jwtDecode(token);\r\n      return user;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAO,MAAMC,IAAI,CAAC;EAChBC,WAAWA,CAAA,EAAG,CAAC;EAEfC,YAAYA,CAACC,WAAW,EAAE;IACxB,OAAOL,KAAK,CACTM,IAAI,CAAC,iCAAiC,EAAED,WAAW,EAAE;MACpDE,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,CACDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACjCF,IAAI,CAAEE,IAAI,IAAK;MACd;MACAC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEH,IAAI,CAACI,YAAY,CAAC;MAC3D;MACA,IAAI,CAACC,aAAa,CAACL,IAAI,CAACI,YAAY,CAAC;MACrC,OAAOJ,IAAI;IACb,CAAC,CAAC;EACN;EAEAM,MAAMA,CAAA,EAAG;IACPL,MAAM,CAACC,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;IAC3C,OAAOlB,KAAK,CAACmB,QAAQ,CAACZ,OAAO,CAAC,eAAe,CAAC;EAChD;EAEAS,aAAaA,CAACI,KAAK,EAAE;IACnBpB,KAAK,CAACmB,QAAQ,CAACZ,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGa,KAAK;EAC7D;EAEAC,KAAKA,CAAA,EAAG;IACN,MAAMD,KAAK,GAAGR,MAAM,CAACC,YAAY,CAACS,OAAO,CAAC,WAAW,CAAC;IACtD,IAAIF,KAAK,EAAE;MACT,MAAM;QAAEG,GAAG,EAAEC;MAAW,CAAC,GAAGvB,SAAS,CAACmB,KAAK,CAAC;MAC5C,IAAII,UAAU,GAAG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;QAC5C,IAAI,CAACV,aAAa,CAACI,KAAK,CAAC;MAC3B,CAAC,MAAM;QACL,IAAI,CAACH,MAAM,CAAC,CAAC;MACf;IACF,CAAC,MAAM;MACL,IAAI,CAACA,MAAM,CAAC,CAAC;IACf;EACF;EAEAU,eAAeA,CAAA,EAAG;IAChB,MAAMP,KAAK,GAAGR,MAAM,CAACC,YAAY,CAACS,OAAO,CAAC,WAAW,CAAC;IACtD,IAAIF,KAAK,EAAE;MACT,MAAM;QAAEG,GAAG,EAAEC;MAAW,CAAC,GAAGvB,SAAS,CAACmB,KAAK,CAAC;MAC5C,IAAII,UAAU,GAAG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;QAC5C,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;EAEAE,OAAOA,CAAA,EAAG;IACR,MAAMR,KAAK,GAAGR,MAAM,CAACC,YAAY,CAACS,OAAO,CAAC,WAAW,CAAC;IACtD,IAAIF,KAAK,EAAE;MACT,MAAM;QAAES;MAAK,CAAC,GAAG5B,SAAS,CAACmB,KAAK,CAAC;MACjC,OAAOS,IAAI;IACb,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;AACF;AAEA,eAAe3B,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}